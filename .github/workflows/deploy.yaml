---
name: Deploy
# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
    inputs:
      job_environment:
        type: choice
        description: 'Job environment prod or dev'
        required: true
        default: 'dev'
        options:
          - prod
          - dev

      clean_docker:
        type: boolean
        description: 'Check for: remove all docker images and voluems'
        required: false
        default: false

      dry_run:
        type: boolean
        description: 'Check for: dry-run'
        required: true
        default: true

      clean_manifests:
        type: boolean
        description: 'Check for: deleting manifests after deployment'
        required: true
        default: true

      drop_db:
        type: boolean
        description: 'Check for: DROP current database'
        required: false
        default: false

jobs:
  Build_docker_image:
    runs-on: self-hosted
    environment: ${{ inputs.job_environment }}
    steps:
      - name: Clean old Docker images
        if: "${{ inputs.clean_docker == true }}"
        run: docker system prune -a -f

      - name: Drop database
        if: "${{ inputs.drop_db == true }}"
        run: sudo rm -rf /opt/persist_volume-${{ inputs.job_environment }}/*

      - name: Login to Docker Repository
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ vars.REPO }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: "{{defaultContext}}:docker"
          tags: ${{ vars.REPO }}/lek-x/${{ vars.IMAGE_NAME }}:${{ github.run_number }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.DOCKER_PASSWORD }}

      - name: Check image by Anchore
        run: |
          grype  ${{ vars.REPO }}/${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:${{ github.run_number }}

  Render_k8s_template:
    needs: [Build_docker_image]
    runs-on: [self-hosted]
    environment: ${{ inputs.job_environment }}
    steps:
      - name: Fixing permission before checkout
        run:  sudo chown runner:runner -R .

      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: deployment/terraform

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: deployment/terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          TF_VAR_IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          TF_VAR_REPO: ${{ vars.REPO }}
          TF_VAR_VERSION: ${{ github.run_number }}
          TF_VAR_JOB_ENV: ${{ inputs.job_environment }}
          TF_VAR_DB_PORT: ${{ vars.POSTGRES_PORT }}
          TF_VAR_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          TF_VAR_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          TF_VAR_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          TF_VAR_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        working-directory: deployment/terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        env:
          TF_VAR_IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          TF_VAR_REPO: ${{ vars.REPO }}
          TF_VAR_VERSION: ${{ github.run_number }}
          TF_VAR_JOB_ENV: ${{ inputs.job_environment }}
          TF_VAR_DB_PORT: ${{ vars.POSTGRES_PORT }}
          TF_VAR_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          TF_VAR_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          TF_VAR_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          TF_VAR_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        working-directory: deployment/terraform

      - name: Render configs
        id: apply
        run: terraform apply -auto-approve
        continue-on-error: true
        env:
          TF_VAR_IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          TF_VAR_REPO: ${{ vars.REPO }}
          TF_VAR_VERSION: ${{ github.run_number }}
          TF_VAR_JOB_ENV: ${{ inputs.job_environment }}
          TF_VAR_DB_PORT: ${{ vars.POSTGRES_PORT }}
          TF_VAR_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          TF_VAR_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          TF_VAR_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          TF_VAR_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        working-directory: deployment/terraform

  Deploy_Services:
    needs: [Render_k8s_template]
    environment: ${{ inputs.job_environment }}
    runs-on: [self-hosted]
    steps:
      - name: Dry-run deploy k3s
        if: ${{ inputs.dry_run == true }}
        run: |
          kubectl apply --dry-run=server -f k8s/${{ inputs.job_environment }}/pgsql.yaml
          kubectl apply --dry-run=server -f k8s/${{ inputs.job_environment }}/app.yaml

      - name: Deploy services
        if: ${{ inputs.dry_run == false }}
        run: |
          kubectl apply -f k8s/${{ inputs.job_environment }}/pgsql.yaml --record
          kubectl apply -f k8s/${{ inputs.job_environment }}/app.yaml --record

      - name: Clean up manifests
        if: ${{ inputs.clean_manifests == true }}
        run: rm -rf k8s/${{ inputs.job_environment }}
