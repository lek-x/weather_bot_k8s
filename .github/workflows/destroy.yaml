---
name: Destroy
# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
    inputs:
      job_environment:
        type: choice
        description: 'Job environment prod or dev'
        required: true
        default: 'dev'
        options:
          - prod
          - dev

      clean_docker:
        type: boolean
        description: 'Check for: remove all docker images and voluems'
        required: false
        default: false

      dry_run:
        type: boolean
        description: 'Check for: dry-run'
        required: true
        default: true

      clean_manifests:
        type: boolean
        description: 'Check for: deleting manifests after deployment'
        required: true
        default: true

      drop_db:
        type: boolean
        description: 'Check for: DROP current database'
        required: false
        default: false

jobs:
  Render_k8s_template:
    needs: [Build_docker_image]
    runs-on: [self-hosted]
    environment: ${{ inputs.job_environment }}
    steps:
      - name: Fixing permission before checkout
        run:  sudo chown runner:runner -R .

      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: deployment/terraform

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: deployment/terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          TF_VAR_IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          TF_VAR_REPO: ${{ vars.REPO }}
          TF_VAR_VERSION: ${{ github.run_number }}
          TF_VAR_JOB_ENV: ${{ inputs.job_environment }}
          TF_VAR_DB_PORT: ${{ vars.POSTGRES_PORT }}
          TF_VAR_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          TF_VAR_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          TF_VAR_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          TF_VAR_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        working-directory: deployment/terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        env:
          TF_VAR_IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          TF_VAR_REPO: ${{ vars.REPO }}
          TF_VAR_VERSION: ${{ github.run_number }}
          TF_VAR_JOB_ENV: ${{ inputs.job_environment }}
          TF_VAR_DB_PORT: ${{ vars.POSTGRES_PORT }}
          TF_VAR_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          TF_VAR_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          TF_VAR_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          TF_VAR_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        working-directory: deployment/terraform

      - name: Render configs
        id: apply
        run: terraform apply -auto-approve
        continue-on-error: true
        env:
          TF_VAR_IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          TF_VAR_REPO: ${{ vars.REPO }}
          TF_VAR_VERSION: ${{ github.run_number }}
          TF_VAR_JOB_ENV: ${{ inputs.job_environment }}
          TF_VAR_DB_PORT: ${{ vars.POSTGRES_PORT }}
          TF_VAR_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          TF_VAR_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          TF_VAR_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          TF_VAR_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        working-directory: deployment/terraform

  Run_k3s:
    needs: [Render_k8s_template]
    environment: ${{ inputs.job_environment }}
    runs-on: [self-hosted]
    steps:
      - name: Dry-run deleting k3s
        if: ${{ inputs.dry_run == true }}
        run: |
          kubectl delete --dry-run=server -f k8s/${{ inputs.job_environment }}/app.yaml
          kubectl delete --dry-run=server -f k8s/${{ inputs.job_environment }}/pgsql.yaml

      - name: Deleting Deployment
        if: ${{ inputs.dry_run == false }}
        run: |
          kubectl delete -f k8s/${{ inputs.job_environment }}/app.yaml --record
          kubectl delete -f k8s/${{ inputs.job_environment }}/pgsql.yaml --record

      - name: Clean up manifests
        if: ${{ inputs.clean_manifests == true }}
        run: rm -rf k8s/${{ inputs.job_environment }}
